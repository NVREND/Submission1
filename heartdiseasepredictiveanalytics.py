# -*- coding: utf-8 -*-
"""HeartDiseasePredictiveAnalytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1skPzVBfK9lTk4wMlqT_a0bd3jJeUqBcO
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Import Libraries"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns


from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

from xgboost import XGBClassifier
from sklearn.model_selection import GridSearchCV



#evaluasi
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import accuracy_score, classification_report

"""# Data Loading"""

!mkdir ~/.kaggle

!cp '/content/kaggle.json' ~/.kaggle
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets list

!kaggle datasets download -d fedesoriano/heart-failure-prediction

!unzip /content/heart-failure-prediction.zip

df= pd.read_csv('heart.csv')
df

"""The code output above provides the following information:

- There are 918 rows in the dataset.
- There are 10 columns, namely: Age, Sex, ChestPainType, RestingBP, Cholesterol, FastingBS, RestingECG, MaxHR, ExerciseAngina, Oldpeak, ST_Slope, HeartDisease
"""

df.info()

"""It can be seen that:
  - There are 5 columns with object types, namely: Sex, ChestPainType, RestingECG, ExerciseAngina, ST_Slope
  - There are 6 numeric columns with type int64, namely: Age, RestigBP, Cholesterol, FastingBS, MaxHR, HeartDisease
  - There is 1 numeric column with type float64, namely Oldpeak

# Data Understanding

This project uses a dataset from Kaggle https://www.kaggle.com/datasets/fedesoriano/heart-failure-prediction

Attribute Information
- Age: age of the patient [years]
- Sex: sex of the patient [M: Male, F: Female]
-ChestPainType: chest pain type [TA: Typical Angina, ATA: Atypical Angina, NAP: -Non-Anginal Pain, ASY: Asymptomatic]
-RestingBP: resting blood pressure [mm Hg]
-Cholesterol: serum cholesterol [mm/dl]
-FastingBS: fasting blood sugar [1: if FastingBS > 120 mg/dl, 0: otherwise]
-RestingECG: resting electrocardiogram results [Normal: Normal, ST: having ST-T wave abnormality (T wave inversions and/or ST elevation or depression of > 0.05 mV), LVH: showing probable or definite left ventricular hypertrophy by Estes' criteria]
-MaxHR: maximum heart rate achieved [Numeric value between 60 and 202]
-ExerciseAngina: exercise-induced angina [Y: Yes, N: No]
-Oldpeak: oldpeak = ST [Numeric value measured in depression]
-ST_Slope: the slope of the peak exercise ST segment [Up: upsloping, Flat: flat, Down: downsloping]
-HeartDisease: output class [1: heart disease, 0: Normal]

# EDA

Checking for missing values
"""

df.isna().sum()

"""check statistics"""

df.describe(include="all")

# Calculate the percentage of heart disease
hd_count = df['HeartDisease'].value_counts().reset_index(name='count')
hd_count.columns = ['HeartDisease', 'count']
hd_count['persentage'] = (hd_count['count'] / hd_count['count'].sum()) * 100
hd_count

"""From this data, we can conclude that in this dataset, more individuals were indicated to have heart disease (55.34%) than those who did not have heart disease (44.66%).

## Univariatve Analysis

- Ctegorical Features = Sex, ChestPainType, FastingBs, RestingECG, ExerciseAngina:, ST_Slope, HeartDisease
- numerical features = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']
"""

categorical_features = ['Sex', 'ChestPainType', 'FastingBS', 'RestingECG', 'ExerciseAngina', 'ST_Slope', 'HeartDisease']
numerical_features = ['Age', 'RestingBP', 'Cholesterol', 'MaxHR', 'Oldpeak']

df.info()

"""### Categorical Features

#### Feature Sex
"""

feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""In the dataset, the majority of samples in the dataset are Male with a percentage of 79. 0%, while Female has a percentage of 21.0%.

#### Feature ChestPainType
"""

feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""There are four categories in the ChestPainType feature, namely TA: Typical Angina, ATA: Atypical Angina, NAP: -Non-Anginal Pain, ASY: Asymptomatic.  The majority of patients in the dataset experienced asymptomatic type of chest pain (ASY), accounting for 54.0% of the total sample.  This was followed by non-anginal pain (NAP) with 22.1%, typical angina (ATA) with 18.8%, and atypical angina (TA) with only 5.0% of the total sample.

#### Feature FastingBS
"""

feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""There are 2 categories in the FastingBS feature, namely fasting blood sugar 1: if FastingBS > 120 mg/dl, 0: otherwise.
 The bar graph also shows the distribution of categories visually, with the majority of patients (76.7%) not fasting, while 23.3% of the total sample fasted.  Analysis of the “FastingBS” feature may be a relevant factor in understanding heart failure prediction.

#### RestingECG
"""

feature = categorical_features[3]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""#### ExerciseAngina"""

feature = categorical_features[4]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""#### Feature ST_Slope"""

feature = categorical_features[5]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_percent = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df_percent)
count.plot(kind='bar', title=feature);

"""The majority of data has a ST slope that is "Flat" (50.1%), followed by "Up" (43.0%) and "Down" (6.9%).

### Numerical Features
"""

df.hist(bins=50, figsize=(15,10))
plt.show()

"""- The age distribution shows that most of the individuals in the data are between 40 and 60 years old.   The highest peak indicates that there are the most people aged 54 years in the dataset.
- Distribution of resting blood pressure The histogram in the RestingBP column shows that the majority of people in the data have normal resting blood pressure (below 120 mmHg).
- The distribution of maximum heart rates shows that the majority of people in the data had normal maximum heart rates (between 75 and 150 bpm).
- The distribution of ST depression (Oldpeak) shows that the majority of people in the data do not have ST depression (0 mm).
"""

df_enc = df

# encode all the categorical features
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

#Encode Sex Feature
label_encoder.fit(df_enc["Sex"])
df_enc["Sex_en"] = label_encoder.fit_transform(df_enc["Sex"])
df_enc.drop("Sex",axis=1,inplace=True)

#Encode ChestPainType feature
label_encoder.fit(df_enc["ChestPainType"])
df_enc["ChestPainType_en"] = label_encoder.fit_transform(df_enc["ChestPainType"])
df_enc.drop("ChestPainType",axis=1,inplace=True)
df_enc

#Encode RestingECG feature
label_encoder.fit(df_enc["RestingECG"])
df_enc["RestingECG_en"] = label_encoder.fit_transform(df_enc["RestingECG"])
df_enc.drop("RestingECG",axis=1,inplace=True)
df_enc

label_encoder.fit(df_enc["ExerciseAngina"])
df_enc["ExerciseAngina_en"] = label_encoder.fit_transform(df_enc["ExerciseAngina"])
df_enc.drop("ExerciseAngina",axis=1,inplace=True)
df_enc

label_encoder.fit(df_enc["ST_Slope"])
df_enc["ST_Slope_en"] = label_encoder.fit_transform(df_enc["ST_Slope"])
df_enc.drop("ST_Slope",axis=1,inplace=True)
df_enc

"""**correlation matrix**"""

df_enc.corr()

plt.figure(figsize=(6, 4))
correlation_matrix = df.select_dtypes(include=['number']).corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""# Data Preprocessing

## Spliting Data
"""

from sklearn.model_selection import train_test_split


# feature & target
X = df.drop("HeartDisease", axis=1)
y = df["HeartDisease"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### Standarization"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train

#X_train[numerical_features].describe().round(4)

"""# Modeling"""

knn = KNeighborsClassifier(n_neighbors=3)
# Train the model
knn.fit(X_train, y_train)

print("Train Accuracy:",knn.score(X_train, y_train))
prediction = knn.predict(X_test)
print("Test Accuracy:",accuracy_score(prediction, y_test))
print("Classification Report",classification_report(y_test, prediction))

rf =  RandomForestClassifier(n_estimators=70, random_state=42)
# Train the model
rf.fit(X_train, y_train)

print("Train Accuracy:",rf.score(X_train, y_train))
prediction = rf.predict(X_test)
print("Test Accuracy:",accuracy_score(prediction, y_test))
print("Classification Report",classification_report(y_test, prediction))

